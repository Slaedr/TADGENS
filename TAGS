
tests/fem/testelementtri.cpp,51
#undef NDEBUGNDEBUG10,249
int main()main20,420

tests/ploterr.py,385
fname = sys.argv[1]fname10,180
title = fname.split('/')[-1]title11,200
data = np.genfromtxt(fname)data13,230
n = data.shape[0]n14,258
psigy = data[:,1].sum()psigy23,467
sigx = data[:,0].sum()sigx24,491
sigx2 = (data[:,0]*data[:,0]).sum()sigx225,514
psigxy = (data[:,1]*data[:,0]).sum()psigxy26,550
pslope = (data[-1,1]-data[-2,1])/(data[-1,0]-data[-2,0])pslope29,638

tests/ploterr2.py,383
fname1 = sys.argv[1]fname110,180
fname2 = sys.argv[2]fname211,201
title1 = fname1.split('/')[-1]title112,222
title2 = fname2.split('/')[-1]title213,253
data1 = np.genfromtxt(fname1)data115,285
data2 = np.genfromtxt(fname2)data216,315
n1 = data1.shape[0]n117,345
n2 = data2.shape[0]n218,365
pslope = np.zeros(2)pslope33,747
symbs = ['bo-', 'gs-', '^-']symbs37,929

src/mesh/amesh2dh.cpp,1259
namespace acfd {acfd4,46
void UMesh2dh::readGmsh2(std::string mfile, int dimensions)readGmsh27,103
void UMesh2dh::printmeshstats()printmeshstats236,6756
void UMesh2dh::writeGmsh2(std::string mfile)writeGmsh2242,7100
EIndex UMesh2dh::getFaceEIndex(const bool phyboundary, const a_int iface,getFaceEIndex305,8781
void UMesh2dh::correctBoundaryFaceOrientation()correctBoundaryFaceOrientation363,10154
void UMesh2dh::compute_elementsSurroundingPoints()compute_elementsSurroundingPoints395,11062
void UMesh2dh::compute_elementsSurroundingElements()compute_elementsSurroundingElements438,12204
void UMesh2dh::compute_face_structure()compute_face_structure522,14753
void UMesh2dh::compute_edge_elem_sizes()compute_edge_elem_sizes630,17200
void UMesh2dh::compute_topological()compute_topological660,18010
std::vector<std::pair<a_int,int>> UMesh2dh::compute_phyBFaceNeighboringElements() constcompute_phyBFaceNeighboringElements682,18563
void UMesh2dh::compute_boundary_maps()compute_boundary_maps744,20746
a_real UMesh2dh::meshSizeParameter() constmeshSizeParameter805,22332
void UMesh2dh::compute_pointsSurroundingPoints()compute_pointsSurroundingPoints819,22677
UMesh2dh prepare_mesh(const std::string meshfile)prepare_mesh932,26145

src/mesh/amesh2dh.hpp,6118
#define AMESH2DH_HAMESH2DH_H7,161
namespace acfd {acfd13,261
typedef int EIndex;EIndex16,343
typedef int FIndex;FIndex18,441
class UMesh2dhUMesh2dh21,553
	double gcoords(int pointno, int dim) constgcoords27,617
	int ginpoel(int elemno, int locnode) constginpoel31,701
	int gbface(int faceno, int val) constgbface35,789
	amat::Array2d<double >* getcoords()getcoords40,868
	a_int gesup(a_int i) const { return esup(i); }gesup43,927
	a_int gesup_p(a_int i) const { return esup_p(i); }gesup_p44,975
	a_int gpsup(a_int i) const { return psup(i); }gpsup45,1027
	a_int gpsup_p(a_int i) const { return psup_p(i); }gpsup_p46,1075
	a_int gesuel(a_int ielem, int jnode) const { return esuel(ielem, jnode); }gesuel47,1127
	a_int gelemface(a_int ielem, int inode) const { return elemface(ielem,inode); }gelemface48,1203
	a_int gintfac(a_int face, int i) const { return intfac(face,i); }gintfac49,1284
	int gintfacbtags(a_int face, int i) const { return intfacbtags(face,i); }gintfacbtags50,1351
	int gfacelocalnum(a_int face, int leftright) const { return facelocalnum(face, leftright); }gfacelocalnum51,1426
	a_int gbifmap(a_int intfacno) const { return bifmap(intfacno); }gbifmap52,1520
	a_int gifbmap(a_int bfaceno) const { return ifbmap(bfaceno); }gifbmap53,1586
	int gflag_bpoin(const a_int pointno) const { return flag_bpoin(pointno); }gflag_bpoin54,1650
	int degree() const { return g_degree; }degree55,1726
	a_int gnpoin() const { return npoin; }gnpoin57,1768
	a_int gnelem() const { return nelem; }gnelem58,1808
	a_int gnface() const { return nface; }gnface59,1848
	a_int gnbface() const { return nbface; }gnbface60,1888
	int gnnode(a_int ielem) const { return nnode[ielem]; }gnnode61,1930
	a_int gnaface() const {return naface; }gnaface62,1986
	int gnfael(a_int ielem) const { return nfael[ielem]; }gnfael63,2027
	int gnnofa(a_int iface) const { return nnofa[iface]; }gnnofa64,2083
	int gnnobfa(a_int ibface) const { return nnobfa[ibface]; }gnnobfa65,2139
	int gmaxnnofa() const { return maxnnofa; }gmaxnnofa66,2199
	int gnbtag() const{ return nbtag; }gnbtag67,2243
	int gndtag() const { return ndtag; }gndtag68,2280
	a_int gnbpoin() const { return nbpoin; }gnbpoin69,2318
	a_real gedgelengthsquared(const a_int iface) const { return els[iface]; }gedgelengthsquared70,2360
	a_real gelemdiam(const a_int iel) const { return eldiam[iel]; }gelemdiam71,2435
	void scoords(const a_int pointno, const int dim, const a_real value)scoords75,2658
	void setcoords(amat::Array2d<double >* c)setcoords80,2766
	void setinpoel(amat::Array2d<int >* inp)setinpoel83,2828
	void setbface(amat::Array2d<int >* bf)setbface86,2891
	void modify_bface_marker(int iface, int pos, int number)modify_bface_marker89,2950
	EIndex getNodeEIndex(const a_int ielem, const EIndex iface, const FIndex inode) constgetNodeEIndex143,5230
	int ndim;								///< Number of space dimensions of mesh - can only be 2, thoughndim160,6049
	int g_degree;							///< Degree of (polynomial) geometric mapping from reference element to physical elementg_degree161,6131
	a_int npoin;							///< Number of nodesnpoin162,6241
	a_int nelem;							///< Number of elementsnelem163,6282
	a_int nface;							///< Number of boundary facesnface164,6326
	std::vector<int> nnode;					///< number of nodes to an element, for each elementnnode165,6376
	std::vector<int> nintnodel;				///< Number of internal (not lying on a face) nodes in an elementnintnodel166,6458
	int maxnnode;							///< Maximum number of nodes per element for any elementmaxnnode167,6556
	int maxnnofa;							///< Maximum number of nodes per face for any facemaxnnofa168,6634
	std::vector<int> nfael;					///< number of faces to an element (equal to number of edges to an element in 2D) for each elementnfael169,6706
	int maxnfael;							///< Maximum number of faces per element for any elementmaxnfael170,6834
	std::vector<int> nnofa;					///< number of nodes in a facennofa171,6912
	std::vector<int> nnobfa;				///< number of nodes in boundary facesnnobfa172,6972
	a_int naface;							///< total number of (internal and boundary) facesnaface173,7040
	a_int nbface;							///< number of boundary faces as calculated, as opposed to nface which is read from filenbface174,7112
	a_int nbpoin;							///< number of boundary pointsnbpoin175,7222
	int nbtag;								///< number of tags for each boundary facenbtag176,7274
	int ndtag;								///< number of tags for each elementndtag177,7336
	amat::Array2d<a_real> coords;			///< Specifies coordinates of each nodecoords178,7392
	amat::Array2d<a_int> inpoel;			///< Interconnectivity matrix: lists node numbers of nodes in each elementinpoel179,7465
	amat::Array2d<a_int> bface;				///< Boundary face data: lists nodes belonging to a boundary face and contains boudnary markersbface180,7572
	amat::Array2d<int> vol_regions;			///< to hold volume region markers, if anyvol_regions181,7700
	amat::Array2d<int> flag_bpoin;			///< Holds 1 or 0 for each point depending on whether or not that point is a boundary pointflag_bpoin182,7778
	std::vector<a_real> els;				///< Holds squared (approx for high-order) length of each edge of the meshels183,7904
	std::vector<a_real> eldiam;				///< Diameter of each elementeldiam184,8008
	amat::Array2d<a_int> esup_p;esup_p187,8175
	amat::Array2d<a_int> esup;esup190,8349
	amat::Array2d<a_int> psup_p;psup_p193,8434
	amat::Array2d<a_int> psup;psup197,8608
	amat::Array2d<a_int> esuel;esuel200,8673
	amat::Array2d<a_int> intfac;intfac206,8955
	amat::Array2d<int> intfacbtags;intfacbtags209,9045
	amat::Array2d<a_int> facelocalnum;facelocalnum215,9356
	amat::Array2d<a_int> elemface;elemface218,9454
	amat::Array2d<a_int> bifmap;				///< relates boundary faces in intfac with bface, ie, bifmap(intfac no.) = bface no.bifmap220,9487
	amat::Array2d<a_int> ifbmap;				///< relates boundary faces in bface with intfac, ie, ifbmap(bface no.) = intfac no.ifbmap221,9605
	bool isBoundaryMaps;						///< Specifies whether bface-intfac maps have been createdisBoundaryMaps222,9723

src/spatial/aspatialpoisson.cpp,779
namespace acfd {acfd9,184
LaplaceSIP::LaplaceSIP(const UMesh2dh* mesh, const int _p_degree, const a_real stab)LaplaceSIP11,202
void LaplaceSIP::assemble()assemble41,1031
void LaplaceSIP::solve()solve201,6813
void LaplaceSIP::postprocess(const std::vector<Matrix>& u)postprocess245,7881
void LaplaceSIP::computeErrors(a_real& __restrict__ l2error, a_real& __restrict__ siperror) constcomputeErrors264,8387
a_real LaplaceSIP::source_term(const a_real r[NDIM], const a_real t) constsource_term353,11509
a_real LaplaceSIP::exact_solution(const a_real r[NDIM], const a_real t) constexact_solution358,11634
a_real LaplaceSIP::exactgradx(const a_real r[NDIM]) const {exactgradx363,11752
a_real LaplaceSIP::exactgrady(const a_real r[NDIM]) const {exactgrady367,11853

src/spatial/anumericalfluxeuler.hpp,483
#define __ANUMERICALFLUXEULER_H __ANUMERICALFLUXEULER_H17,296
namespace acfd {acfd19,333
class InviscidNumericalFluxInviscidNumericalFlux24,546
	const a_real g;			///< Adiabatic indexg27,590
class LocalLaxFriedrichsFlux : public InviscidNumericalFluxLocalLaxFriedrichsFlux44,1249
class VanLeerFlux : public InviscidNumericalFluxVanLeerFlux52,1591
class RoeFlux : public InviscidNumericalFluxRoeFlux60,1876
class HLLCFlux : public InviscidNumericalFluxHLLCFlux70,2230

src/spatial/aspatialeuler.hpp,953
#define __ASPATIALEULER_H__ASPATIALEULER_H8,169
#define NVARS NVARS10,196
namespace acfd {acfd15,273
class CompressibleEuler : public SpatialBaseCompressibleEuler22,576
	a_real g;								///< Adiabatic indexg25,634
	Vector instate;							///< State at inflowinstate26,673
	a_real outstate;						///< State at exitoutstate27,717
	int inoutflow_flag;						///< Boundary flag at faces where inflow or outflow is requiredinoutflow_flag28,759
	int extrapolation_flag;					///< Boundary flag for extrapolation conditionextrapolation_flag29,849
	int slipwall_flag;						///< Boundary flag for slip wallslipwall_flag30,925
	int periodic_flag;						///< Boundary flag for periodic boundaryperiodic_flag31,983
	amat::Array2d<a_real> output;			///< Pointwise values for outputoutput32,1049
	InviscidNumericalFlux* rflux;			///< Inviscid Riemann flux contextrflux33,1115
	const amat::Array2d<a_real>& getOutput() const {getOutput54,2045

src/spatial/aanalyticalfluxes.hpp,921
#define __AANALYTICALLUXES_H__AANALYTICALLUXES_H8,187
namespace acfd {acfd18,327
class NormalEulerFluxFunctionNormalEulerFluxFunction21,467
	const a_real gamma;gamma24,510
	NormalEulerFluxFunction (a_real _gamma) : gamma(_gamma)NormalEulerFluxFunction26,539
	void evaluate_flux(const amat::Array2d<a_real>& state, const a_real* const n, amat::Array2d<a_real>& flux) constevaluate_flux29,602
	void evaluate_flux_2(const amat::Array2d<a_real>& state, const int ielem, const a_real* const n, amat::Array2d<a_real>& flux, const int iside) constevaluate_flux_239,1050
class FluxFunctionFluxFunction51,1702
class EulerFlux : public FluxFunctionEulerFlux58,1899
	const a_real g;				///< Adiabatic indexg60,1939
	EulerFlux (a_real _gamma) : g(_gamma)EulerFlux62,1988
	void evaluate_flux(const a_real *const __restrict__ u, a_real *const __restrict__ fx, a_real *const __restrict__ fy)evaluate_flux64,2032

src/spatial/spatialfactory.cpp,0

src/spatial/alimiter.hpp,1536
#define __ALIMITER_H__ALIMITER_H15,183
namespace acfd {acfd17,205
class FaceDataComputationFaceDataComputation22,514
	const UMesh2dh* m;m25,553
	const amat::Matrix<acfd_real>* u;			///< Cell-centered flow datau26,573
	const amat::Matrix<acfd_real>* ug;			///< Cell-centered ghost cell flow dataug27,639
	const amat::Matrix<acfd_real>* dudx;dudx28,717
	const amat::Matrix<acfd_real>* dudy;dudy29,755
	const amat::Matrix<acfd_real>* rb;			///< coords of cell centers of ghost cellsrb30,793
	const amat::Matrix<acfd_real>* ri;			///< coords of cell centers of real cellsri31,874
	const amat::Matrix<acfd_real>* gr;		/// coords of gauss points of each facegr32,954
	amat::Matrix<acfd_real>* ufl;			///< left face flow dataufl33,1031
	amat::Matrix<acfd_real>* ufr;			///< right face flow dataufr34,1089
	int ng;									///< Number of Gauss pointsng35,1148
class NoLimiter : public FaceDataComputationNoLimiter53,2349
class WENOLimiter : public FaceDataComputationWENOLimiter71,3598
	amat::Matrix<acfd_real>* ldudx;ldudx73,3647
	amat::Matrix<acfd_real>* ldudy;ldudy74,3680
	acfd_real gamma;gamma75,3713
	acfd_real lambda;lambda76,3731
	acfd_real epsilon;epsilon77,3750
class VanAlbadaLimiter : public FaceDataComputationVanAlbadaLimiter87,4298
    acfd_real eps;eps89,4352
    acfd_real k;               			/// van-Albada parameterk90,4371
	amat::Matrix<acfd_real> phi_l;		/// left-face limiter valuesphi_l91,4430
	amat::Matrix<acfd_real> phi_r;		/// right-face limiter valuesphi_r92,4492

src/spatial/alimiter.cpp,1211
namespace acfd {acfd3,25
FaceDataComputation::FaceDataComputation()FaceDataComputation5,43
FaceDataComputation::FaceDataComputation (const UMesh2dh* mesh, const amat::Matrix<acfd_real>* unknowns, const amat::Matrix<acfd_real>* unknow_ghost, FaceDataComputation8,91
FaceDataComputation::~FaceDataComputation()~FaceDataComputation26,887
void FaceDataComputation::setup(const UMesh2dh* mesh, const amat::Matrix<acfd_real>* unknowns, const amat::Matrix<acfd_real>* unknow_ghost, setup29,936
NoLimiter::NoLimiter(const UMesh2dh* mesh, const amat::Matrix<acfd_real>* unknowns, const amat::Matrix<acfd_real>* unknow_ghost, NoLimiter47,1716
void NoLimiter::compute_face_values()compute_face_values54,2273
WENOLimiter::WENOLimiter(const UMesh2dh* mesh, const amat::Matrix<acfd_real>* unknowns, const amat::Matrix<acfd_real>* unknow_ghost, WENOLimiter93,3691
WENOLimiter::~WENOLimiter()~WENOLimiter107,4479
void WENOLimiter::compute_face_values()compute_face_values113,4542
void VanAlbadaLimiter::setup(const UMesh2dh* mesh, const amat::Matrix<acfd_real>* unknowns, const amat::Matrix<acfd_real>* unknow_ghost, setup190,6937
void VanAlbadaLimiter::compute_face_values()compute_face_values203,7722

src/spatial/aspatialpoisson.hpp,1143
#define ASPATIALPOISSON_H ASPATIALPOISSON_H8,139
namespace acfd {acfd14,218
class LaplaceSIP : public SpatialBaseLaplaceSIP20,401
	const amat::Array2d<a_real>& getOutput() const {getOutput33,713
	void update_residual(const std::vector<Matrix>& u,update_residual37,784
	a_real nu;											///< Diffusivitynu46,1086
	a_real eta;											///< Penaltyeta47,1125
	int dirichlet_id;									///< Boundary marker for Dirichlet boundarydirichlet_id48,1161
	int neumann_id;										///< Boundary marker for homogeneous Neumann boundaryneumann_id49,1232
	a_real dirichlet_value;								///< Dirichlet boundary valuedirichlet_value50,1312
	std::vector<a_int> dirdofflags;						dirdofflags52,1457
	a_int ndirdofs;										///< Number of Dirichlet DOFsndirdofs53,1496
	a_real cbig;										///< Penalty for Dirichlet conditioncbig54,1552
	Eigen::SparseMatrix<a_real> Ag;						///< Global left hand side matrixAg56,1613
	Vector bg;											///< Global load vectorbg57,1685
	Vector ug;											///< 'Global' solution vectorug58,1731
	amat::Array2d<a_real> output;						///< Output array for plottingoutput59,1783

src/spatial/aoutput.cpp,546
void writeScalarsVectorToVtu_CellData(std::string fname, const acfd::UMesh2dh& m, const amat::Array2d<double>& x, std::string scaname[], const amat::Array2d<double>& y, std::string vecname)writeScalarsVectorToVtu_CellData11,365
void writeScalarsVectorToVtu_PointData(std::string fname, const acfd::UMesh2dh& m, const amat::Array2d<double>& x, std::string scaname[], const amat::Array2d<double>& y, std::string vecname)writeScalarsVectorToVtu_PointData118,3666
void writeMeshToVtu(std::string fname, acfd::UMesh2dh& m)writeMeshToVtu229,7114

src/spatial/aspatial.cpp,1248
namespace acfd {acfd9,143
SpatialBase::SpatialBase(const UMesh2dh* mesh, const int _p_degree, char basistype)SpatialBase11,161
SpatialBase::~SpatialBase()~SpatialBase57,1694
void SpatialBase::computeFEData()computeFEData71,1930
void SpatialBase::spatialSetup(std::vector<Matrix>& u, std::vector<Matrix>& res,spatialSetup159,5102
a_real SpatialBase::computeElemL2Norm2(const int ielem, const Vector& __restrict__ ug) constcomputeElemL2Norm2178,5534
a_real SpatialBase::computeL2Norm(const std::vector<Matrix> w, const int comp) constcomputeL2Norm200,6114
a_real SpatialBase::computeElemL2Error2(const int ielem, const int comp,computeElemL2Error2220,6674
a_real SpatialBase::computeL2Error(const double time, const std::vector<Matrix>& u) constcomputeL2Error246,7493
void SpatialBase::setInitialConditionNodal(const int comp, double (**const init)(a_real, a_real),setInitialConditionNodal256,7738
void SpatialBase::setInitialConditionModal(const int comp, double (**const init)(a_real, a_real),setInitialConditionModal275,8383
a_real SpatialBase::source_term(const a_real r[NDIM], const a_real t) constsource_term301,9213
a_real SpatialBase::exact_solution(const a_real r[NDIM], const a_real t) constexact_solution306,9305

src/spatial/areconstruction.cpp,438
namespace acfdacfd10,188
Reconstructor::Reconstructor(int n_sur, const Element** sur_elems, const Matrix* sur_dofs) : nsur(n_sur), selms(sur_elems), sdofs(sur_dofs)Reconstructor13,206
LeastSquaresReconstructor::LeastSquaresReconstructor(int n_sur, const Element** sur_elems, const Matrix* sur_dofs) : Reconstructor(n_sur, sur_elems, sur_dofs)LeastSquaresReconstructor16,351
void LeastSquaresReconstructor::compute()compute73,2582

src/spatial/aspatial.hpp,1690
#define ASPATIAL_H ASPATIAL_H8,136
namespace acfd {acfd18,329
class SpatialBaseSpatialBase26,670
	const UMesh2dh* m;m30,799
	std::vector<Matrix> minv;             ///< Inverse of mass matrix for each variable of each elementminv32,820
	int p_degree;                         ///< Polynomial degree of trial/test functionsp_degree33,921
	a_int ntotaldofs;                     ///< Total number of DOFs in the discretization per physical variable)ntotaldofs34,1007
	char basis_type;                      ///< Type of basis to use - Lagrange ('l') or Taylor ('t')basis_type35,1117
	bool reconstruct;                     ///< Use reconstruction or notreconstruct36,1215
	Quadrature2DTriangle* dtquad;				///< Domain quadrature contextdtquad38,1286
	Quadrature2DSquare* dsquad;					///< Domain quadrature contextdsquad39,1351
	Quadrature1D* bquad;						///< Boundary quadrature contextbquad40,1415
	LagrangeMapping2D* map2d;					///< Array containing geometric mapping data for each elementmap2d41,1475
	LagrangeMapping1D* map1d;					///< Array containing geometric mapping data for each facemap1d42,1568
	Element** elems;							///< List of finite elementselems43,1658
	Element* dummyelem;							///< Empty element used for ghost elementsdummyelem44,1711
	FaceElement* faces;							///< List of face elementsfaces45,1781
	amat::Array2d<a_real> scalars;				///< Holds scalar variables for each mesh pointscalars47,1836
	amat::Array2d<a_real> velocities;			///< Holds velocity components for each mesh pointvelocities48,1919
	const std::vector<Matrix>& massInv() const {massInv88,3497
	a_int numTotalDOFs() const { return ntotaldofs; }numTotalDOFs92,3562

src/spatial/anumericalfluxeuler.cpp,1153
namespace acfd {acfd9,192
InviscidNumericalFlux::InviscidNumericalFlux(const a_real gamma) : g(gamma)InviscidNumericalFlux11,212
InviscidNumericalFlux::~InviscidNumericalFlux()~InviscidNumericalFlux14,296
LocalLaxFriedrichsFlux::LocalLaxFriedrichsFlux(const a_real gamma) : InviscidNumericalFlux(gamma)LocalLaxFriedrichsFlux17,352
void LocalLaxFriedrichsFlux::get_flux(const a_real *const ul, const a_real *const ur, const a_real* const n, a_real *const flux)get_flux20,458
VanLeerFlux::VanLeerFlux(const a_real gamma) : InviscidNumericalFlux(gamma)VanLeerFlux42,1364
void VanLeerFlux::get_flux(const a_real *const ul, const a_real *const ur, const a_real* const n, a_real *const flux)get_flux46,1449
RoeFlux::RoeFlux(const a_real gamma) : InviscidNumericalFlux(gamma)RoeFlux113,3428
void RoeFlux::get_flux(const a_real *const ul, const a_real *const ur, const a_real* const n, a_real *const flux)get_flux116,3504
HLLCFlux::HLLCFlux(const a_real gamma) : InviscidNumericalFlux(gamma)HLLCFlux223,7148
void HLLCFlux::get_flux(const a_real *const ul, const a_real *const ur, const a_real* const n, a_real *const flux)get_flux229,7352

src/spatial/aoutput.hpp,0

src/spatial/aspatialpoisson_continuous.hpp,2076
#define ASPATIALPOISSON_CONTINUOUS_H ASPATIALPOISSON_CONTINUOUS_H8,161
namespace acfd {acfd14,251
class LaplaceC : public SpatialBase<1>LaplaceC16,269
	a_real nu;											///< Diffusivitynu19,321
	a_real eta;											///< Penaltyeta20,360
	a_real (*const rhs)(a_real, a_real);				///< forcing functionrhs21,396
	a_real (*const exact)(a_real, a_real,a_real);		///< Exact solutionexact22,459
	a_real (*const exactgradx)(a_real, a_real);			///< Exact x-derivative of exact solutionexactgradx23,527
	a_real (*const exactgrady)(a_real, a_real);			///< Exact y-derivative of exact solutionexactgrady24,616
	int dirichlet_id;                         ///< Boundary marker for Dirichlet boundarydirichlet_id25,705
	int neumann_id;                           ///< Boundary marker for homogeneous Neumann boundaryneumann_id26,792
	a_real dirichlet_value;                   ///< Dirichlet boundary valuedirichlet_value27,889
	std::vector<a_int> dirdofflags;           ///< Binary flag for each DOFdirdofflags28,962
	a_int ndirdofs;                           ///< Number of Dirichlet DOFsndirdofs30,1106
	a_int ntotaldofs;                         ///< Total number of DOFsntotaldofs31,1179
	a_real cbig;                              ///< Penalty for Dirichlet conditioncbig32,1248
	amat::Array2d<int> dofmap;                ///< Identifies global dof index with local dofs and element indexdofmap33,1328
	Vector bflag;                             ///< Marks whether a DOF lies on a boundary or notbflag34,1438
	Eigen::SparseMatrix<a_real> Ag;           ///< Global left hand side matrixAg36,1533
	Vector bg;                                ///< Global load vectorbg37,1610
	Vector ug;                                ///< 'Global' solution vectorug38,1677
	amat::Array2d<a_real> output;             ///< Output array for plottingoutput39,1750
	const amat::Array2d<a_real>& getOutput() const {getOutput54,2267
	void update_residual(const std::vector<Matrix>& u, std::vector<Matrix>& res, std::vector<a_real>& mets) { }update_residual58,2338

src/spatial/areconstruction.hpp,701
#define ARECONSTRUCTION_H ARECONSTRUCTION_H8,178
namespace acfdacfd12,237
class ReconstructorReconstructor16,334
	int nsur;nsur20,408
	const Element** selms;selms23,446
	const Matrix* sdofs;sdofs29,649
	Matrix rder;rder32,703
	const Matrix& recDOFs() const {recDOFs41,946
class LeastSquaresReconstructor : public ReconstructorLeastSquaresReconstructor52,1334
	int ntotaldofs;ntotaldofs54,1391
	int numknowndofs;numknowndofs55,1408
	int numders;				///< numders = ntotaldofs - numknowndofsnumders56,1427
	int pdegree;				///< Polynomial degree of underlying DG discretizationpdegree57,1485
	Matrix R;R58,1557
	Matrix A;A59,1568
	std::vector<Matrix> cbasis;cbasis61,1661

src/spatial/aspatialadvection.cpp,641
namespace acfd {acfd9,189
LinearAdvection::LinearAdvection(const UMesh2dh* mesh, const int _p_degree, const char basis, LinearAdvection11,207
void LinearAdvection::computeBoundaryState(const int iface, const Matrix& instate, computeBoundaryState23,663
void LinearAdvection::computeNumericalFlux(computeNumericalFlux48,1384
void LinearAdvection::update_residual(const std::vector<Matrix>& u, std::vector<Matrix>& res,update_residual59,1650
void LinearAdvection::postprocess(const std::vector<Matrix>& u)postprocess196,6276
a_real LinearAdvection::exact_solution(const a_real r[NDIM], const a_real t) constexact_solution237,7592

src/spatial/aspatialpoisson_continuous.cpp,403
namespace acfd {acfd9,206
LaplaceC::LaplaceC(const UMesh2dh* mesh, const int _p_degree, const a_real stab,LaplaceC11,224
void LaplaceC::assemble()assemble61,1836
void LaplaceC::solve()solve116,3281
void LaplaceC::postprocess(const std::vector<Matrix>& u)postprocess129,3619
void LaplaceC::computeErrors(a_real& __restrict__ l2error, a_real& __restrict__ siperror) constcomputeErrors136,3769

src/spatial/aspatialeuler.cpp,884
namespace acfd {acfd9,190
CompressibleEuler::CompressibleEuler(const UMesh2dh* mesh, const int _p_degree, const char basis, const Vector vel, const a_real b_val, const int inoutflag, const int extrapflag)CompressibleEuler11,208
void CompressibleEuler::computeBoundaryState(const int iface, const Matrix& __restrict__ instate, Matrix& __restrict__ bstate)computeBoundaryState47,1542
void CompressibleEuler::computeFaceTerms(const std::vector<Matrix>& u)computeFaceTerms79,2559
void CompressibleEuler::update_residual(const std::vector<Matrix>& u)update_residual154,5496
void CompressibleEuler::add_source( a_real (*const rhs)(a_real, a_real, a_real), a_real t)add_source195,6622
a_real CompressibleEuler::computeL2Error(double (*const exact)(double,double,double), const double time) constcomputeL2Error216,7290
void CompressibleEuler::postprocess()postprocess227,7577

src/spatial/aspatialadvection.hpp,898
#define ASPATIALADVECTION_HASPATIALADVECTION_H8,166
namespace acfd {acfd12,220
class LinearAdvection : public SpatialBaseLinearAdvection20,514
	const amat::Array2d<a_real>& getOutput() const {getOutput33,1043
	Vector a;								///< Advection velocitya41,1260
	a_real amag;							///< Magnitude of advection velocityamag42,1302
	int inoutflow_flag;						///< Boundary flag at faces where inflow or outflow is requiredinoutflow_flag44,1360
	int extrapolation_flag;					///< Boundary flag for extrapolation conditionextrapolation_flag45,1450
	amat::Array2d<a_real> output;			///< Pointwise values for outputoutput46,1526
	const int nvars;                        ///< Number of advected variables - currently 1nvars48,1593
	a_real source_term(const a_real position[NDIM], const a_real time) constsource_term61,2237
	a_real bcfunc(const a_real position[NDIM]) constbcfunc67,2362

src/spatial/spatialfactory.hpp,66
#define TADGENS_SPATIAL_FACTORY_HTADGENS_SPATIAL_FACTORY_H7,137

src/fem/aelements.cpp,2654
namespace acfd {acfd9,145
void getLagrangeBasis(const Matrix& __restrict__ gp, const Shape shape, const int degree,  Matrix& __restrict__ basisv)getLagrangeBasis16,385
void getLagrangeBasisGrads(const Matrix& __restrict__ gp, const Shape shape, const int degree, std::vector<Matrix>& __restrict__ basisG)getLagrangeBasisGrads69,2575
void getLagrangeJacobianDetAndInverse(const Matrix& __restrict__ po, const Shape shape, const int degree, const Matrix& __restrict__ phy,getLagrangeJacobianDetAndInverse122,5323
void getLagrangeMap(const Matrix& __restrict__ pts, const Shape shape,getLagrangeMap171,6904
void getTaylorBasis(const Matrix& gp, const int degree,getTaylorBasis202,7702
void getTaylorBasisGrads(const Matrix& gp, const int degree, const a_real *const center,getTaylorBasisGrads227,8552
void LagrangeMapping1D::computeAll()computeAll256,9472
void LagrangeMapping2D::calculateMap(const Matrix& __restrict__ points, Matrix& __restrict__ maps) constcalculateMap310,11141
void LagrangeMapping2D::calculateJacobianDetAndInverse(const Matrix& __restrict__ po,calculateJacobianDetAndInverse315,11307
void LagrangeMapping2D::computeForReferenceElement()computeForReferenceElement321,11569
void LagrangeMapping2D::computeForPhysicalElement()computeForPhysicalElement335,12051
void LagrangeMapping2D::computePhysicalCoordsOfDomainQuadraturePoints()computePhysicalCoordsOfDomainQuadraturePoints348,12450
void TaylorElement::initialize(int degr, GeomMapping2D* geommap)initialize363,13103
void TaylorElement::computeBasis(const Matrix& __restrict__ gp, Matrix& __restrict__ basiss) constcomputeBasis464,16141
void TaylorElement::computeBasisGrads(const Matrix& __restrict__ gp, const std::vector<MatrixDim>& jinv, std::vector<Matrix>& __restrict__ basisG) constcomputeBasisGrads469,16310
void LagrangeElement::initialize(int degr, GeomMapping2D* geommap)initialize474,16525
Matrix LagrangeElement::getReferenceNodes() constgetReferenceNodes513,17750
void LagrangeElement::computeBasis(const Matrix& __restrict__ gp, Matrix& __restrict__ basisv) constcomputeBasis548,18546
void LagrangeElement::computeBasisGrads(const Matrix& __restrict__ gp, const std::vector<MatrixDim>& __restrict__ jinv, std::vector<Matrix>& __restrict__ basisG) constcomputeBasisGrads553,18709
void FaceElement::initialize(const Element*const lelem, const Element*const relem, const GeomMapping1D*const gmapping, const int l_lfn, const int r_lfn)initialize597,20566
void FaceElement::computeBasisGrads()computeBasisGrads651,22591
a_real FaceElement::getElementRefCoords(const Matrix& __restrict__ facepoints,getElementRefCoords707,24411

src/fem/aquadrature.hpp,897
#define AQUADRATURE_HAQUADRATURE_H8,139
namespace acfd {acfd13,223
class QuadratureRuleQuadratureRule16,286
	Shape shape;shape19,320
	int ngauss;										///< Number of quadrature pointsngauss20,334
	int nPoly;										///< Degree of polynomial to integrate exactlynPoly21,389
	amat::Array2d<a_real> gweights;gweights22,457
	Matrix ggpoints;ggpoints23,490
	virtual ~QuadratureRule() { }~QuadratureRule26,564
	const amat::Array2d<a_real>& weights() const {weights28,597
	const Matrix& points() const {points32,668
	int numGauss() const {numGauss36,723
	Shape getShape() const {getShape40,768
class Quadrature1D : public QuadratureRuleQuadrature1D46,850
class Quadrature2D : public QuadratureRuleQuadrature2D52,943
class Quadrature2DSquare : public Quadrature2DQuadrature2DSquare61,1213
class Quadrature2DTriangle : public Quadrature2DQuadrature2DTriangle68,1376

src/fem/aelements.hpp,6778
#define AELEMENTS_HAELEMENTS_H12,275
namespace acfd {acfd18,384
class GeomMapping1DGeomMapping1D23,590
	int degree;								///< Polynomial degree of the mappingdegree26,623
	Matrix phyNodes;						///< Physical locations of the nodes (ndim x ndofs)phyNodes27,681
	std::vector<Vector> normals;			///< Unit normals at quadrature pointsnormals28,756
	std::vector<a_real> speeds;speeds31,896
	Matrix mapping;mapping35,1033
	const Quadrature1D* quadrature;			///< Gauss points and weights for integrating quantitiesquadrature37,1051
	int getDegree() const {getDegree41,1174
	void setAll(const int deg, const Matrix& physicalnodes, const Quadrature1D* q) {setAll46,1310
	const Matrix& getPhyNodes() const {getPhyNodes53,1507
	const std::vector<a_real>& speed() const {speed58,1610
	const std::vector<Vector>& normal() const {normal63,1753
	const Matrix& map() const {map68,1886
	const Quadrature1D* getQuadrature() const {getQuadrature76,2080
	virtual ~GeomMapping1D() { }~GeomMapping1D80,2150
class LagrangeMapping1D : public GeomMapping1DLagrangeMapping1D94,2679
class GeomMapping2DGeomMapping2D101,2845
	Shape shape;								///< Shape of the elementshape104,2878
	int degree;									///< Polynomial degree of the mapdegree105,2925
	Matrix phyNodes;							///< Physical coordinates of the nodes (ndim x ndofs)phyNodes106,2980
	std::vector<MatrixDim> jaco;				///< Jacobian matrix of the mappingjaco107,3058
	std::vector<MatrixDim> jacoinv;				///< Inverse of the Jacobian matrixjacoinv108,3127
	std::vector<a_real> jacodet;				///< Determinant of the Jacobian matrixjacodet109,3199
	Matrix mapping;								///< Physical coords of the quadrature pointsmapping110,3272
	const Quadrature2D* quadrature;				///< Gauss points and weights for integrating quantitiesquadrature111,3342
	int getDegree() const {getDegree115,3466
	Shape getShape() const {getShape119,3512
	void setAll(const int deg, const Matrix& physicalnodes, const Quadrature2D* const quad) {setAll124,3664
	const Matrix& getPhyNodes() const {getPhyNodes155,4996
	const Matrix& map() const {map160,5136
	const std::vector<MatrixDim>& jac() const {jac165,5250
	const std::vector<MatrixDim>& jacInv() const {jacInv170,5388
	const std::vector<a_real>& jacDet() const {jacDet175,5512
	const Quadrature2D* getQuadrature() const {getQuadrature180,5613
	virtual ~GeomMapping2D() { }~GeomMapping2D184,5683
class LagrangeMapping2D: public GeomMapping2DLagrangeMapping2D193,6033
enum BasisType {REFERENTIAL, PHYSICAL, NONEXISTENT};BasisType214,6770
enum BasisType {REFERENTIAL, PHYSICAL, NONEXISTENT};REFERENTIAL214,6770
enum BasisType {REFERENTIAL, PHYSICAL, NONEXISTENT};PHYSICAL214,6770
enum BasisType {REFERENTIAL, PHYSICAL, NONEXISTENT};NONEXISTENT214,6770
struct BasisSetBasisSet222,7192
	std::vector<int> deg;deg224,7210
	std::vector<Matrix> basis;basis225,7233
	std::vector<std::vector<Matrix>> basisGrad;basisGrad226,7261
class ElementElement237,7844
	BasisType type;									///< Where are the basis functions defined? \sa BasisTypetype240,7871
	int degree;										///< Polynomial degreedegree241,7954
	int ndof;										///< Number of local DOFsndof242,7999
	Matrix basis;									///< Values of basis functions at quadrature pointsbasis243,8045
	std::vector<Matrix> basisGrad;basisGrad246,8196
	const GeomMapping2D* gmap;gmap248,8303
	const BasisSet* bset;							bset250,8398
	virtual ~Element() { }~Element267,9205
	a_real interpolate(const int ig, const Vector& dofs) constinterpolate270,9324
	void interpolateAll(const Matrix& __restrict__ dofs, Matrix& __restrict__ values) constinterpolateAll287,9978
	void interpolateComponent(const int comp, const Matrix& __restrict__ dofs,interpolateComponent295,10291
	virtual const Matrix& bFunc() const {bFunc302,10552
	virtual const std::vector<Matrix>& bGrad() const {bGrad307,10693
	int getDegree() const {getDegree311,10769
	int getNumDOFs() const {getNumDOFs315,10815
	BasisType getType() const {getType319,10860
	const GeomMapping2D* getGeometricMapping() const {getGeometricMapping323,10908
class TaylorElement : public ElementTaylorElement339,11490
	a_real area;                          ///< Area of the elementarea341,11529
	a_real center[NDIM];                  ///< Physical location of element's geometric centercenter342,11593
	a_real delta[NDIM];                   ///< Maximum extent of the element in the coordinate directionsdelta343,11685
	std::vector<std::vector<a_real>> basisOffset;basisOffset346,11885
	TaylorElement() {TaylorElement349,11941
	void printDetails() const {printDetails365,12580
	a_real getArea() const {getArea369,12703
	const a_real* getCenter() const {getCenter373,12748
	const a_real* getDelta() const {getDelta377,12804
	const std::vector<std::vector<a_real>>& getBasisOffsets() const {getBasisOffsets381,12858
class LagrangeElement : public ElementLagrangeElement396,13336
	LagrangeElement() {LagrangeElement399,13385
	const Matrix& bFunc() const {bFunc417,14072
	const std::vector<Matrix>& bGrad() const {bGrad422,14205
class DummyElement : public ElementDummyElement430,14361
	void initialize(int degr, GeomMapping2D* geommap) { type = NONEXISTENT; }initialize433,14407
	void computeBasis(const Matrix& points, Matrix& basisvalues) const { };computeBasis434,14482
	void computeBasisGrads(const Matrix& points, const std::vector<MatrixDim>& jinv,computeBasisGrads435,14555
class FaceElementFaceElement443,14927
	const Element* leftel;								///< "Left" elementleftel446,14958
	const Element* rightel;								///< "Right" elementrightel447,15009
	int llfn, rlfn;llfn450,15133
	int llfn, rlfn;rlfn450,15133
	Matrix leftbasis;leftbasis453,15231
	Matrix rightbasis;rightbasis455,15330
	std::vector<Matrix> leftbgrad;leftbgrad458,15413
	std::vector<Matrix> rightbgrad;rightbgrad460,15508
	const GeomMapping1D* gmap;							gmap463,15599
	const Matrix& leftBasis() {leftBasis498,17517
	const Matrix& rightBasis() {rightBasis503,17636
	const std::vector<Matrix>& leftBasisGrad() {leftBasisGrad508,17732
	const std::vector<Matrix>& rightBasisGrad() {rightBasisGrad513,17844
	a_real interpolate_left(const int ig, const Vector& dofs)interpolate_left518,17989
	a_real interpolate_right(const int ig, const Vector& dofs)interpolate_right527,18244
	void interpolateAll_left(const Matrix& dofs, Matrix& __restrict__ values) {interpolateAll_left535,18428
	void interpolateAll_right(const Matrix& dofs, Matrix& __restrict__ values) {interpolateAll_right539,18558
inline void evaluateFunctions(const Matrix& dofs, const Matrix& basisv,evaluateFunctions550,19163
inline void evaluateGradients(const Matrix& dofs,evaluateGradients564,19883

src/fem/aquadrature.cpp,244
namespace acfd {acfd9,148
void Quadrature1D::initialize(const int n_poly)initialize14,292
void Quadrature2DSquare::initialize(const int n_poly)initialize101,3119
void Quadrature2DTriangle::initialize(const int n_poly)initialize194,5989

src/poissonC.cpp,269
double exactsol(double x, double y, double t) {exactsol14,258
double exactgradx(double x, double y) {exactgradx17,337
double exactgrady(double x, double y) {exactgrady20,411
double rhs(double x, double y) {rhs23,485
int main(int argc, char* argv[])main27,560

src/poissonSIP.cpp,72
#undef NDEBUGNDEBUG7,121
int main(int argc, char* argv[])main28,600

src/aconstants.hpp,891
#define ACONSTANTS_HACONSTANTS_H3,22
#define  PI PI12,156
#define SQRT2 SQRT213,193
#define SQRT3 SQRT314,226
#define ZERO_TOL ZERO_TOL17,329
#define SMALL_NUMBER SMALL_NUMBER20,422
#define NDIM NDIM22,450
#define MESHDATA_DOUBLE_PRECISION MESHDATA_DOUBLE_PRECISION25,500
namespace acfdacfd28,545
	typedef double a_real;a_real30,562
	typedef int a_int;a_int31,586
	enum Shape {LINE, TRIANGLE, QUADRANGLE};Shape34,638
	enum Shape {LINE, TRIANGLE, QUADRANGLE};LINE34,638
	enum Shape {LINE, TRIANGLE, QUADRANGLE};TRIANGLE34,638
	enum Shape {LINE, TRIANGLE, QUADRANGLE};QUADRANGLE34,638
typedef Eigen::Matrix<acfd::a_real, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> Matrix;Matrix41,779
typedef Eigen::Matrix<acfd::a_real, NDIM, NDIM, Eigen::RowMajor> MatrixDim;MatrixDim44,907
typedef Eigen::Matrix<acfd::a_real, Eigen::Dynamic, 1> Vector;Vector47,1036

src/utilities/adatastructures.cpp,55
int perm(int start, int end, int n, int off)perm3,32

src/utilities/grid_conv_unsteady.cpp,668
double beta = 200.0, xc = -0.2, yc = 0;beta16,324
double beta = 200.0, xc = -0.2, yc = 0;xc16,324
double beta = 200.0, xc = -0.2, yc = 0;yc16,324
double a0 = 1.0, a1 = 0.0;a017,364
double a0 = 1.0, a1 = 0.0;a117,364
double init(double x, double y) {init19,392
double initgradx(double x, double y) {initgradx22,483
double initgrady(double x, double y) {initgrady25,558
double initgradxx(double x, double y) {initgradxx28,633
double initgradyy(double x, double y) {initgradyy31,739
double initgradxy(double x, double y) {initgradxy34,845
double exactsol(double x, double y, double t) {exactsol38,933
int main(int argc, char* argv[])main42,1014

src/utilities/aarray2d.hpp,3004
#define AARRAY2D_HAARRAY2D_H16,293
#define MATRIX_DOUBLE_PRECISION MATRIX_DOUBLE_PRECISION22,393
namespace amat {amat25,436
const int WIDTH = 10;		// width of field for printing matricesWIDTH33,527
inline T gabs(T x)gabs39,648
inline a_real minmod(a_real a, a_real b)minmod45,712
class Array2dArray2d61,1118
	a_int nrows;nrows64,1143
	a_int ncols;ncols65,1157
	a_int size;size66,1171
	T* elems;elems67,1184
	Array2d() : nrows{0}, ncols{0}, size{0}, elems{nullptr}Array2d71,1303
	Array2d(a_int nr, a_int nc) : nrows{nr}, ncols{nc}, size{nr*nc}, elems{new T[nrows*ncols]}Array2d75,1391
	Array2d(const Array2d<T>& other) : nrows{other.nrows}, ncols{other.ncols}, size{nrows*ncols},Array2d83,1643
	~Array2d()~Array2d92,1886
	Array2d<T>& operator=(const Array2d<T>& rhs)operator =97,1924
	void setup(a_int nr, a_int nc)setup117,2395
	void resize(a_int nr, a_int nc=1)resize132,2780
	void initialize(a_int nr, a_int nc, const T *const array)initialize145,3124
	void setupraw(a_int nr, a_int nc)setupraw163,3646
	void zeros()zeros177,4011
	void ones()ones183,4090
	void identity()identity189,4161
	void setdata(const T* A, a_int sz)setdata200,4422
	T get(const a_int i, const a_int j=0) constget214,4709
	void set(a_int i, a_int j, T data)set223,5000
	a_int rows() const { return nrows; }rows232,5274
	a_int cols() const { return ncols; }cols233,5312
	a_int msize() const { return size; }msize234,5350
	void mprint() constmprint237,5432
	void fprint(std::ofstream& outfile) constfprint249,5705
	void fread(std::ifstream& infile)fread262,6000
	T& operator()(const a_int x, const a_int y=0)operator ()274,6368
	T operator()(const a_int x, const a_int y=0) constoperator ()284,6776
	const T* const_row_pointer(const a_int r) constconst_row_pointer294,7133
	const T* operator[](const a_int r) constoperator []303,7409
	T* row_pointer(const a_int r)row_pointer312,7658
	T* operator[](const a_int r)operator []321,7901
	T maxincol(a_int j) constmaxincol329,8082
	T maxinrow(a_int i) constmaxinrow337,8223
	T max() constmax345,8364
	T gabsmax() constgabsmax354,8557
	T minincol(a_int j) constminincol362,8724
	T mininrow(a_int i) constmininrow370,8865
	T min() constmin378,9006
	T average() constaverage386,9134
	T l2norm() const		l2norm396,9349
	Array2d<T> sub(a_int startr, a_int startc, a_int offr, a_int offc) constsub408,9550
	Array2d<T> col(a_int j) constcol418,9869
	Array2d<T> row(a_int i) constrow426,10012
	void replacecol(a_int j, Array2d<T> b)replacecol445,10550
	void replacerow(a_int i, Array2d<T> b)replacerow455,10818
	Array2d<T> trans() consttrans465,11079
	Array2d<T> operator*(T num)operator *475,11333
	Array2d<T> operator+(Array2d<T> B) constoperator +486,11581
	Array2d<T> operator-(Array2d<T> B) constoperator -504,11948
	Array2d<T> operator*(Array2d<T> B)operator *521,12313
	T dot_product(const Array2d<T>& A)dot_product542,12885
	T matrixNorm_1() constmatrixNorm_1561,13375

src/utilities/grid_conv_steady.cpp,73
#undef NDEBUGNDEBUG10,201
int main(int argc, char* argv[])main20,390

src/utilities/adatastructures.hpp,790
#define __ADATASTRUCTURES_H__ADATASTRUCTURES_H8,173
struct NodeNode15,285
	T data;data17,301
	Node* next;next18,311
class CircListCircList22,351
	Node<T>* start;start25,380
	int size;size26,398
	CircList(T n)CircList29,421
	Node<T>* traverse(int n)traverse38,580
	Node<T>* last()last56,884
	void push(T x)push67,1014
	Node<T>* find(T x)find77,1202
	void print_list()print_list90,1474
	~CircList()~CircList103,1693
class MergeSortMergeSort123,2165
	T** arrs;arrs125,2185
	int length;length126,2197
	int num_arr;num_arr127,2211
	int nsort;nsort128,2226
	MergeSort(T** arrays, int length_arrays, int num_arrays, int index_of_sorting_array)MergeSort130,2248
	void merge(T** a, T** b, T** fin, int len)merge134,2437
	void mergesort()mergesort139,2513

src/utilities/convertformat.cpp,44
int main(int argc, char* argv[])main8,120

src/time/atimetvdrk.cpp,279
namespace acfd {acfd9,144
TVDRKStepping::TVDRKStepping(const UMesh2dh *const mesh, SpatialBase *const s, const int timeorder, TVDRKStepping11,162
double TVDRKStepping::integrate()integrate19,457
double TVDRKStepping::integrate_ForwardEuler()integrate_ForwardEuler88,2220

src/time/aodecoeffs.hpp,125
#define AODECOEFFS_HAODECOEFFS_H8,169
namespace acfd {acfd12,226
void initializeOdeCoeffs() {initializeOdeCoeffs26,772

src/time/atimetvdrk.hpp,573
#define ATIMETVDRK_HATIMETVDRK_H8,186
namespace acfd {acfd13,267
class TVDRKSteppingTVDRKStepping19,466
	const UMesh2dh *const m;						///< Mesh contextm22,499
	SpatialBase* spatial;							///< Spatial discretization contextspatial23,548
	int order;										///< Desird temporal order of accuracyorder24,613
	double cfl;										///< CFL numbercfl25,673
	double ftime;									///< Physical time up to which simulation should proceedftime26,711
	char tch;										tch29,873
	double timestep;								///< Fixed time step, if tch was 'c'timestep30,894

src/explicitsolver.cpp,45
int main(int argc, char* argv[])main11,178

src/solvers/asolversteady.hpp,436
#define ASOLVERSTEADY_HASOLVERSTEADY_H8,168
namespace acfd{acfd12,226
class SolverSteadySolverSteady15,307
	SolverBase* space;				///< Spatial discretization contextspace18,339
	acfd_real icfl;icfl19,398
	acfd_real fcfl;fcfl20,415
	acfd_real tol;tol21,432
	int maxits;maxits22,448
	int rampstart;rampstart23,461
	int rampend;rampend24,477
class SolverSteadyExplicit : public SolverSteadySolverSteadyExplicit33,813

src/solvers/atimesteady.hpp,771
#define ATIMESTEADY_HATIMESTEADY_H8,152
namespace acfd {acfd12,208
class SteadyBaseSteadyBase18,407
	const UMesh2dh *const m;						///< Mesh contextm21,437
	SpatialBase *const spatial;                     ///< Spatial discretization contextspatial22,486
	std::vector<Matrix> R;							///< ResidualsR24,572
	std::vector<Matrix> u;u29,742
	std::vector<a_real> tsl;tsl36,1012
	int order;										///< Desird temporal order of accuracyorder38,1039
	double cfl;										///< CFL numbercfl39,1099
	double tol;										///< Tolerance for residualtol40,1137
	int maxiter;									///< Max number of iterationsmaxiter41,1187
	const std::vector<Matrix>& solution() const {solution48,1398
class SteadyExplicit : public SteadyBaseSteadyExplicit57,1598

src/solvers/alinalg.cpp,1624
namespace acfd {acfd3,24
void gausselim(amat::Matrix<acfd_real>& A, amat::Matrix<acfd_real>& b, amat::Matrix<acfd_real>& x)gausselim5,42
void LUfactor(amat::Matrix<acfd_real>& A, amat::Matrix<int>& p)LUfactor79,1634
void LUsolve(const amat::Matrix<acfd_real>& A, const amat::Matrix<int>& p, const amat::Matrix<acfd_real>& b, amat::Matrix<acfd_real>& x)LUsolve128,2556
SSOR_MFSolver::SSOR_MFSolver(const int num_vars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual, const FluxFunction* const inviscid_flux,SSOR_MFSolver165,3396
void SSOR_MFSolver::compute_update(amat::Matrix<acfd_real>* const du)compute_update175,4014
BJ_MFSolver::BJ_MFSolver(const int num_vars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual, const FluxFunction* const inviscid_flux,BJ_MFSolver248,6027
void BJ_MFSolver::compute_update(amat::Matrix<acfd_real>* const du)compute_update257,6621
SSOR_Solver::SSOR_Solver(const int nvars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual, SSOR_Solver271,6920
void SSOR_Solver::compute_update(amat::Matrix<acfd_real>* const du)compute_update280,7375
BJ_Solver::BJ_Solver(const int nvars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual, BJ_Solver336,8621
void BJ_Solver::compute_update(amat::Matrix<acfd_real>* const du)compute_update344,9032
BJ_Relaxation::BJ_Relaxation(const int nvars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual, BJ_Relaxation358,9327
void BJ_Relaxation::compute_update(amat::Matrix<acfd_real>* const u)compute_update366,9766

src/solvers/alinalg.hpp,4489
#define ALINALG_HALINALG_H7,106
namespace acfd {acfd12,195
class IterativeSolverIterativeSolver29,908
	const int nvars;								///< Number of conserved variablesnvars32,943
	const UMesh2dh* const m;						///< meshm33,1003
	const amat::Matrix<acfd_real>* const res;		///< Vector of `residuals' at previous iterationres34,1044
	IterativeSolver(const int num_vars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual) IterativeSolver36,1145
	virtual ~IterativeSolver()~IterativeSolver43,1491
class MatrixFreeIterativeSolver : public IterativeSolverMatrixFreeIterativeSolver53,2031
	const FluxFunction* const invf;invf56,2101
	const amat::Matrix<acfd_real>* const diag;			///< Diagonal blocksdiag57,2134
	const amat::Matrix<int>* const pa;					///< permuation array of diag after LU factorizationpa58,2201
	const amat::Matrix<acfd_real>* const lambdaij;		///< Eigenvalue part of the Jacobianlambdaij59,2294
	const amat::Matrix<acfd_real>* const elemflux;		///< Flux corresponding to the state at which Jacobian is to be computedelemflux60,2380
	const amat::Matrix<acfd_real>* const u;				///< state at which Jacobian is to be computedu61,2502
	MatrixFreeIterativeSolver(const int num_vars, const UMesh2dh* const mesh, const amat::Matrix<acfd_real>* const residual, const FluxFunction* const inviscid_flux,MatrixFreeIterativeSolver63,2601
class SSOR_MFSolver : public MatrixFreeIterativeSolverSSOR_MFSolver78,3505
	amat::Matrix<acfd_real> f1;f181,3564
	amat::Matrix<acfd_real> f2;f282,3593
	amat::Matrix<acfd_real> uelpdu;uelpdu83,3622
	amat::Matrix<acfd_real> elemres;elemres84,3655
	const double w;								///< Over-relaxation factorw85,3689
	acfd_int ielem, jelem, iface;ielem86,3741
	acfd_int ielem, jelem, iface;jelem86,3741
	acfd_int ielem, jelem, iface;iface86,3741
	acfd_real s, sum;s87,3772
	acfd_real s, sum;sum87,3772
	acfd_real n[NDIM];n88,3791
	int jfa;jfa89,3811
	int ivar;ivar90,3821
	acfd_real lambda;lambda91,3832
class BJ_MFSolver : public MatrixFreeIterativeSolverBJ_MFSolver106,4589
	amat::Matrix<acfd_real> f1;f1109,4646
	amat::Matrix<acfd_real> f2;f2110,4675
	amat::Matrix<acfd_real> uelpdu;uelpdu111,4704
	amat::Matrix<acfd_real> elemres;elemres112,4737
	const double w;								///< Over-relaxation factorw113,4771
	acfd_int ielem, jelem, iface;ielem114,4823
	acfd_int ielem, jelem, iface;jelem114,4823
	acfd_int ielem, jelem, iface;iface114,4823
	acfd_real s, sum;s115,4854
	acfd_real s, sum;sum115,4854
	acfd_real n[NDIM];n116,4873
	int jfa;jfa117,4893
	int ivar;ivar118,4903
	acfd_real lambda;lambda119,4914
class SSOR_Solver : public IterativeSolverSSOR_Solver134,5696
	const amat::Matrix<acfd_real>* const D;D136,5741
	const amat::Matrix<int>* const Dpa;Dpa137,5782
	const amat::Matrix<acfd_real>* const U;U138,5819
	const amat::Matrix<acfd_real>* const L;L139,5860
	const double w;w140,5901
	amat::Matrix<acfd_real> f1;f1141,5918
	amat::Matrix<acfd_real> f2;f2142,5947
	acfd_int i, j, ielem, jelem, iface;i143,5976
	acfd_int i, j, ielem, jelem, iface;j143,5976
	acfd_int i, j, ielem, jelem, iface;ielem143,5976
	acfd_int i, j, ielem, jelem, iface;jelem143,5976
	acfd_int i, j, ielem, jelem, iface;iface143,5976
class BJ_Solver : public IterativeSolverBJ_Solver154,6442
	const amat::Matrix<acfd_real>* const D;D156,6485
	const amat::Matrix<int>* const Dpa;Dpa157,6526
	const double w;w158,6563
	amat::Matrix<acfd_real> f1;f1160,6582
	amat::Matrix<acfd_real> f2;f2161,6611
	acfd_int ielem, jelem, iface;ielem162,6640
	acfd_int ielem, jelem, iface;jelem162,6640
	acfd_int ielem, jelem, iface;iface162,6640
	acfd_real s, sum;s163,6671
	acfd_real s, sum;sum163,6671
	acfd_real n[NDIM];n164,6690
	int jfa;jfa165,6710
	int ivar;ivar166,6720
class BJ_Relaxation : public IterativeSolverBJ_Relaxation176,7109
	const amat::Matrix<acfd_real>* const D;D178,7156
	const amat::Matrix<int>* const Dpa;Dpa179,7197
	const amat::Matrix<acfd_real>* const U;U180,7234
	const amat::Matrix<acfd_real>* const L;L181,7275
	const double w;w182,7316
	amat::Matrix<acfd_real> f1;f1184,7335
	amat::Matrix<acfd_real> f2;f2185,7364
	acfd_int ielem, jelem, iface;ielem186,7393
	acfd_int ielem, jelem, iface;jelem186,7393
	acfd_int ielem, jelem, iface;iface186,7393
	acfd_real s, sum;s187,7424
	acfd_real s, sum;sum187,7424
	acfd_real n[NDIM];n188,7443
	int jfa;jfa189,7463
	int ivar;ivar190,7473

src/solvers/atimesteady.cpp,271
namespace acfd {acfd9,155
SteadyBase::SteadyBase(const UMesh2dh *const mesh, SpatialBase *const s,SteadyBase11,173
SteadyExplicit::SteadyExplicit(const UMesh2dh*const mesh, SpatialBase *const s,SteadyExplicit29,677
void SteadyExplicit::integrate()integrate35,897

src/solvers/asolversteady.cpp,47
void SolverSteadyExplicit::solve()solve9,169

src/tadgens.cpp,43
int main(int argc, char *argv[])main3,32

runs/multicore_job.sh,0

doc/theory/implementation.tex,38
\end{abstract}List of symbols27,514

doc/theory/proposal.tex,1117
where $M \in \mathbb{R}^{n\times n}$ is the mass matrix $[M]_{ij} = \int_{K} B_iB_j\,d\mu$ and $\bld{r}(\mathbf{u})$ is the vector: $\bld{r}_i(\mathbf{u}) :=  \int_{\partial K}  \bld{h}(\bld{u}_{hL}, \bld{u}_{hR}, \hat{\bld{n}})b_i \,ds - \int_{\Omega_e}\bld{F}(u_h)\nabla b_i \,d\mu$. Note that we have given the equation for one conserved variable, and that the coupling between the different conserved variables comes about from the numerical flux $h$.Taylor basis functions106,7730
The `streamline upwind Petrov-Galerkin' method is a technique for solving hyperbolic PDEs that uses continuous trial and test function spaces, as opposed to DG methods. This means that degrees of freedom are shared between surrounding elements, and thus the number of degrees of freedom required to attain a given error level is lower than DG, at least for smooth solutions. SUPG is stable in presence shocks as well. However, it has its issues, as described nicely in section 2.5 of \cite{hartmann_thesis}.Outline of the project195,16952
One can think of the following questions that need answering.Taylor basis DG198,17494

doc/theory/report.tex,790
In our implementation, Gauss-Legendre quadrature has been used to integrate the terms in the weak form. The number of points was chosen so that a polynomial of degree 2$p$ would be integrated exactly for $p$th degree basis functions.Taylor basis functions136,9817
where the superscript $j$ indicates that the function is evaluated at the element-centre of $j$. Writing these equations for all face-neighbours $j$, we get a 9x3 system for a triangle and a 12x3 system for a quadrilateral, in the three variables - the three second derivatives at the centre of cell $i$. This can be solved in a least squares sense to give a unique solution. Further, a WENO reconstruction can be used to suppress spurious oscillations to preserve nonlinear stability \cite{luo_hweno}.DG vs SUPG250,21626

build/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/tests/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/tests/fem/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/tests/advection/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/tests/poisson/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/tests/advection-ellipseboundary/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/src/Makefile,332
SUFFIXES =SUFFIXES21,545
SHELL = /bin/shSHELL39,903
CMAKE_COMMAND = /usr/bin/cmakeCMAKE_COMMAND42,944
RM = /usr/bin/cmake -E remove -fRM45,1008
EQUALS = =EQUALS48,1077
CMAKE_SOURCE_DIR = /home/akashi/Projects/TaDGENSCMAKE_SOURCE_DIR51,1146
CMAKE_BINARY_DIR = /home/akashi/Projects/TaDGENS/buildCMAKE_BINARY_DIR54,1252

build/CMakeFiles/feature_tests.c,128
  const char features[] = {"\n"features2,1
int main(int argc, char** argv) { (void)argv; return features[argc]; }main34,617

build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c,11185
# define ID_VOID_MAINID_VOID_MAIN6,98
# define constconst10,197
# define volatilevolatile11,212
# define COMPILER_ID COMPILER_ID19,413
#  define SIMULATE_ID SIMULATE_ID21,465
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR24,533
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR25,591
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH27,691
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH29,760
#  define COMPILER_VERSION_TWEAK COMPILER_VERSION_TWEAK33,919
#  define SIMULATE_VERSION_MAJOR SIMULATE_VERSION_MAJOR37,1041
#  define SIMULATE_VERSION_MINOR SIMULATE_VERSION_MINOR38,1094
# define COMPILER_ID COMPILER_ID42,1182
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR43,1215
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR44,1263
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH46,1353
# define COMPILER_ID COMPILER_ID50,1484
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR51,1519
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR52,1591
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH53,1663
# define COMPILER_ID COMPILER_ID56,1764
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR58,1824
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR59,1877
# define COMPILER_ID COMPILER_ID62,1984
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR64,2042
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR65,2097
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH67,2186
# define COMPILER_ID COMPILER_ID71,2277
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR73,2346
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR74,2410
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH76,2499
# define COMPILER_ID COMPILER_ID80,2589
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR83,2674
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR84,2727
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH85,2786
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR88,2880
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR89,2932
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH90,2990
# define COMPILER_ID COMPILER_ID94,3080
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR96,3131
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR97,3182
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH98,3237
# define COMPILER_ID COMPILER_ID101,3315
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR103,3376
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR104,3433
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH105,3495
# define COMPILER_ID COMPILER_ID108,3613
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR110,3663
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR111,3713
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH112,3767
# define COMPILER_ID COMPILER_ID115,3895
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR117,3944
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR118,3994
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH119,4048
# define COMPILER_ID COMPILER_ID122,4175
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR124,4231
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR125,4281
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH126,4335
# define COMPILER_ID COMPILER_ID129,4411
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR130,4438
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR131,4484
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH133,4570
# define COMPILER_ID COMPILER_ID137,4659
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR138,4687
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR139,4739
# define COMPILER_ID COMPILER_ID142,4831
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR144,4901
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR145,4970
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH146,5045
# define COMPILER_ID COMPILER_ID149,5198
# define COMPILER_ID COMPILER_ID152,5255
# define COMPILER_ID COMPILER_ID155,5309
# define COMPILER_ID COMPILER_ID158,5370
# define COMPILER_ID COMPILER_ID161,5459
#  define SIMULATE_ID SIMULATE_ID163,5516
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR165,5553
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR166,5606
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH167,5659
#  define SIMULATE_VERSION_MAJOR SIMULATE_VERSION_MAJOR170,5765
#  define SIMULATE_VERSION_MINOR SIMULATE_VERSION_MINOR171,5818
# define COMPILER_VERSION_TWEAK COMPILER_VERSION_TWEAK173,5879
# define COMPILER_ID COMPILER_ID176,5966
#  define SIMULATE_ID SIMULATE_ID178,6018
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR180,6055
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR181,6108
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH182,6161
#  define SIMULATE_VERSION_MAJOR SIMULATE_VERSION_MAJOR185,6267
#  define SIMULATE_VERSION_MINOR SIMULATE_VERSION_MINOR186,6320
# define COMPILER_ID COMPILER_ID190,6406
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR191,6433
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR193,6508
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH196,6603
# define COMPILER_ID COMPILER_ID200,6694
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR202,6746
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR203,6798
#   define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH207,6937
#   define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH210,7042
#  define COMPILER_VERSION_TWEAK COMPILER_VERSION_TWEAK214,7145
# define COMPILER_ID COMPILER_ID218,7317
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR221,7421
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR222,7483
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH223,7552
# define COMPILER_ID COMPILER_ID227,7694
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR229,7743
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR230,7801
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH231,7865
#  define COMPILER_VERSION_INTERNAL COMPILER_VERSION_INTERNAL232,7920
# define COMPILER_ID COMPILER_ID236,8021
  # define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR239,8115
  # define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR240,8178
  # define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH241,8245
  # define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR244,8351
  # define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR245,8413
  # define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH246,8479
# define COMPILER_ID COMPILER_ID251,8607
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR253,8670
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR254,8729
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH255,8788
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR258,8873
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR259,8920
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH260,8971
# define COMPILER_ID COMPILER_ID264,9098
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR267,9201
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR268,9265
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH269,9333
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR272,9440
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR273,9500
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH274,9564
# define COMPILER_ID COMPILER_ID282,9825
# define COMPILER_ID COMPILER_ID285,9898
# define COMPILER_ID COMPILER_ID288,9954
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";info_compiler295,10252
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";info_simulate297,10339
char const* qnxnto = "INFO" ":" "qnxnto[]";qnxnto301,10433
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";info_cray305,10528
#define STRINGIFY_HELPER(STRINGIFY_HELPER308,10603
#define STRINGIFY(STRINGIFY309,10634
# define PLATFORM_ID PLATFORM_ID313,10778
# define PLATFORM_ID PLATFORM_ID316,10834
# define PLATFORM_ID PLATFORM_ID319,10892
# define PLATFORM_ID PLATFORM_ID322,10947
# define PLATFORM_ID PLATFORM_ID325,11040
# define PLATFORM_ID PLATFORM_ID328,11121
# define PLATFORM_ID PLATFORM_ID331,11200
# define PLATFORM_ID PLATFORM_ID334,11280
# define PLATFORM_ID PLATFORM_ID337,11349
# define PLATFORM_ID PLATFORM_ID340,11475
# define PLATFORM_ID PLATFORM_ID343,11561
# define PLATFORM_ID PLATFORM_ID346,11633
# define PLATFORM_ID PLATFORM_ID349,11688
# define PLATFORM_ID PLATFORM_ID352,11779
# define PLATFORM_ID PLATFORM_ID355,11854
# define PLATFORM_ID PLATFORM_ID358,11946
# define PLATFORM_ID PLATFORM_ID361,12023
# define PLATFORM_ID PLATFORM_ID364,12121
# define PLATFORM_ID PLATFORM_ID367,12178
# define PLATFORM_ID PLATFORM_ID370,12235
# define PLATFORM_ID PLATFORM_ID373,12305
# define PLATFORM_ID PLATFORM_ID376,12377
# define PLATFORM_ID PLATFORM_ID379,12467
# define PLATFORM_ID PLATFORM_ID382,12565
# define PLATFORM_ID PLATFORM_ID385,12658
#  define PLATFORM_ID PLATFORM_ID389,12739
#  define PLATFORM_ID PLATFORM_ID392,12794
#  define PLATFORM_ID PLATFORM_ID395,12847
#  define PLATFORM_ID PLATFORM_ID398,12904
#  define PLATFORM_IDPLATFORM_ID401,12969
# define PLATFORM_IDPLATFORM_ID405,13029
#  define ARCHITECTURE_ID ARCHITECTURE_ID416,13369
#  define ARCHITECTURE_ID ARCHITECTURE_ID419,13447
#  define ARCHITECTURE_ID ARCHITECTURE_ID422,13504
#  define ARCHITECTURE_ID ARCHITECTURE_ID425,13562
#   define ARCHITECTURE_ID ARCHITECTURE_ID429,13638
#   define ARCHITECTURE_ID ARCHITECTURE_ID431,13694
#   define ARCHITECTURE_ID ARCHITECTURE_ID433,13738
#  define ARCHITECTURE_ID ARCHITECTURE_ID437,13824
#  define ARCHITECTURE_ID ARCHITECTURE_ID440,13880
#  define ARCHITECTURE_ID ARCHITECTURE_ID443,13947
#  define ARCHITECTURE_ID ARCHITECTURE_ID448,14033
#  define ARCHITECTURE_ID ARCHITECTURE_ID451,14090
#  define ARCHITECTURE_ID ARCHITECTURE_ID454,14157
#  define ARCHITECTURE_ID ARCHITECTURE_ID459,14285
#  define ARCHITECTURE_ID ARCHITECTURE_ID462,14345
#  define ARCHITECTURE_ID ARCHITECTURE_ID465,14412
#  define ARCHITECTURE_IDARCHITECTURE_ID468,14455
#define DEC(DEC472,14539
#define HEX(HEX483,14888
char const info_version[] = {info_version495,15250
char const info_version_internal[] = {info_version_internal513,15748
char const info_simulate_version[] = {info_simulate_version522,16074
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";info_platform542,16743
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";info_arch543,16811
#  define C_DIALECT C_DIALECT550,16948
#  define C_DIALECTC_DIALECT552,16980
# define C_DIALECT C_DIALECT555,17042
# define C_DIALECT C_DIALECT557,17100
# define C_DIALECT C_DIALECT559,17130
const char* info_language_dialect_default =info_language_dialect_default561,17161
void main() {}main567,17353
int main(argc, argv) int argc; char *argv[];main570,17402

build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp,10650
# define COMPILER_ID COMPILER_ID13,390
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR15,451
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR16,511
# define COMPILER_ID COMPILER_ID19,622
#  define SIMULATE_ID SIMULATE_ID21,674
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR24,742
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR25,800
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH27,900
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH29,969
#  define COMPILER_VERSION_TWEAK COMPILER_VERSION_TWEAK33,1128
#  define SIMULATE_VERSION_MAJOR SIMULATE_VERSION_MAJOR37,1250
#  define SIMULATE_VERSION_MINOR SIMULATE_VERSION_MINOR38,1303
# define COMPILER_ID COMPILER_ID42,1391
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR43,1424
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR44,1472
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH46,1562
# define COMPILER_ID COMPILER_ID50,1693
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR51,1728
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR52,1800
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH53,1872
# define COMPILER_ID COMPILER_ID56,1973
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR58,2033
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR59,2086
# define COMPILER_ID COMPILER_ID62,2193
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR64,2251
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR65,2306
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH67,2395
# define COMPILER_ID COMPILER_ID71,2486
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR73,2555
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR74,2619
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH76,2708
# define COMPILER_ID COMPILER_ID80,2799
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR83,2886
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR84,2940
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH85,3000
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR88,3095
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR89,3148
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH90,3207
# define COMPILER_ID COMPILER_ID94,3299
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR96,3351
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR97,3403
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH98,3459
# define COMPILER_ID COMPILER_ID101,3540
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR103,3603
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR104,3662
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH105,3726
# define COMPILER_ID COMPILER_ID108,3848
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR110,3900
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR111,3952
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH112,4008
# define COMPILER_ID COMPILER_ID115,4142
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR117,4193
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR118,4245
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH119,4301
# define COMPILER_ID COMPILER_ID122,4434
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR124,4492
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR125,4544
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH126,4600
# define COMPILER_ID COMPILER_ID129,4678
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR130,4705
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR131,4751
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH133,4837
# define COMPILER_ID COMPILER_ID137,4926
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR138,4954
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR139,5006
# define COMPILER_ID COMPILER_ID142,5098
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR144,5168
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR145,5237
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH146,5312
# define COMPILER_ID COMPILER_ID149,5465
# define COMPILER_ID COMPILER_ID152,5528
# define COMPILER_ID COMPILER_ID155,5617
#  define SIMULATE_ID SIMULATE_ID157,5674
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR159,5711
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR160,5764
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH161,5817
#  define SIMULATE_VERSION_MAJOR SIMULATE_VERSION_MAJOR164,5923
#  define SIMULATE_VERSION_MINOR SIMULATE_VERSION_MINOR165,5976
# define COMPILER_VERSION_TWEAK COMPILER_VERSION_TWEAK167,6037
# define COMPILER_ID COMPILER_ID170,6124
#  define SIMULATE_ID SIMULATE_ID172,6176
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR174,6213
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR175,6266
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH176,6319
#  define SIMULATE_VERSION_MAJOR SIMULATE_VERSION_MAJOR179,6425
#  define SIMULATE_VERSION_MINOR SIMULATE_VERSION_MINOR180,6478
# define COMPILER_ID COMPILER_ID184,6585
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR186,6635
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR188,6689
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR191,6773
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH194,6868
# define COMPILER_ID COMPILER_ID198,6959
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR200,7011
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR201,7063
#   define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH205,7202
#   define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH208,7307
#  define COMPILER_VERSION_TWEAK COMPILER_VERSION_TWEAK212,7410
# define COMPILER_ID COMPILER_ID216,7582
# define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR219,7686
# define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR220,7748
# define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH221,7817
# define COMPILER_ID COMPILER_ID225,7959
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR227,8008
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR228,8066
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH229,8130
#  define COMPILER_VERSION_INTERNAL COMPILER_VERSION_INTERNAL230,8185
# define COMPILER_ID COMPILER_ID234,8286
  # define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR237,8380
  # define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR238,8443
  # define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH239,8510
  # define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR242,8616
  # define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR243,8678
  # define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH244,8744
# define COMPILER_ID COMPILER_ID249,8886
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR252,8989
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR253,9053
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH254,9121
#  define COMPILER_VERSION_MAJOR COMPILER_VERSION_MAJOR257,9228
#  define COMPILER_VERSION_MINOR COMPILER_VERSION_MINOR258,9288
#  define COMPILER_VERSION_PATCH COMPILER_VERSION_PATCH259,9352
# define COMPILER_ID COMPILER_ID267,9613
# define COMPILER_ID COMPILER_ID270,9686
# define COMPILER_ID COMPILER_ID273,9742
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";info_compiler280,10040
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";info_simulate282,10127
char const* qnxnto = "INFO" ":" "qnxnto[]";qnxnto286,10221
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";info_cray290,10316
#define STRINGIFY_HELPER(STRINGIFY_HELPER293,10391
#define STRINGIFY(STRINGIFY294,10422
# define PLATFORM_ID PLATFORM_ID298,10566
# define PLATFORM_ID PLATFORM_ID301,10622
# define PLATFORM_ID PLATFORM_ID304,10680
# define PLATFORM_ID PLATFORM_ID307,10735
# define PLATFORM_ID PLATFORM_ID310,10828
# define PLATFORM_ID PLATFORM_ID313,10909
# define PLATFORM_ID PLATFORM_ID316,10988
# define PLATFORM_ID PLATFORM_ID319,11068
# define PLATFORM_ID PLATFORM_ID322,11137
# define PLATFORM_ID PLATFORM_ID325,11263
# define PLATFORM_ID PLATFORM_ID328,11349
# define PLATFORM_ID PLATFORM_ID331,11421
# define PLATFORM_ID PLATFORM_ID334,11476
# define PLATFORM_ID PLATFORM_ID337,11567
# define PLATFORM_ID PLATFORM_ID340,11642
# define PLATFORM_ID PLATFORM_ID343,11734
# define PLATFORM_ID PLATFORM_ID346,11811
# define PLATFORM_ID PLATFORM_ID349,11909
# define PLATFORM_ID PLATFORM_ID352,11966
# define PLATFORM_ID PLATFORM_ID355,12023
# define PLATFORM_ID PLATFORM_ID358,12093
# define PLATFORM_ID PLATFORM_ID361,12165
# define PLATFORM_ID PLATFORM_ID364,12255
# define PLATFORM_ID PLATFORM_ID367,12353
# define PLATFORM_ID PLATFORM_ID370,12446
#  define PLATFORM_ID PLATFORM_ID374,12527
#  define PLATFORM_ID PLATFORM_ID377,12582
#  define PLATFORM_ID PLATFORM_ID380,12635
#  define PLATFORM_ID PLATFORM_ID383,12692
#  define PLATFORM_IDPLATFORM_ID386,12757
# define PLATFORM_IDPLATFORM_ID390,12817
#  define ARCHITECTURE_ID ARCHITECTURE_ID401,13157
#  define ARCHITECTURE_ID ARCHITECTURE_ID404,13235
#  define ARCHITECTURE_ID ARCHITECTURE_ID407,13292
#  define ARCHITECTURE_ID ARCHITECTURE_ID410,13350
#   define ARCHITECTURE_ID ARCHITECTURE_ID414,13426
#   define ARCHITECTURE_ID ARCHITECTURE_ID416,13482
#   define ARCHITECTURE_ID ARCHITECTURE_ID418,13526
#  define ARCHITECTURE_ID ARCHITECTURE_ID422,13612
#  define ARCHITECTURE_ID ARCHITECTURE_ID425,13668
#  define ARCHITECTURE_ID ARCHITECTURE_ID428,13735
#  define ARCHITECTURE_ID ARCHITECTURE_ID433,13821
#  define ARCHITECTURE_ID ARCHITECTURE_ID436,13878
#  define ARCHITECTURE_ID ARCHITECTURE_ID439,13945
#  define ARCHITECTURE_ID ARCHITECTURE_ID444,14073
#  define ARCHITECTURE_ID ARCHITECTURE_ID447,14133
#  define ARCHITECTURE_ID ARCHITECTURE_ID450,14200
#  define ARCHITECTURE_IDARCHITECTURE_ID453,14243
#define DEC(DEC457,14327
#define HEX(HEX468,14676
char const info_version[] = {info_version480,15038
char const info_version_internal[] = {info_version_internal498,15536
char const info_simulate_version[] = {info_simulate_version507,15862
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";info_platform527,16531
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";info_arch528,16599
#define CXX_STD CXX_STD534,16712
#define CXX_STD CXX_STD536,16745
const char* info_language_dialect_default = "INFO" ":" "dialect_default["info_language_dialect_default539,16781
int main(int argc, char* argv[])main553,17054

build/CMakeFiles/feature_tests.cxx,130
  const char features[] = {"\n"features2,1
int main(int argc, char** argv) { (void)argv; return features[argc]; }main405,9940
